{
	"info": {
		"_postman_id": "bcf58786-c209-4da8-9b0c-f9173dba3556",
		"name": "MeTube-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "initial",
			"item": [
				{
					"name": "trivial",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d6b4a1b-f3fa-4e4e-ad75-dd3992b5b665",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recreate db not admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recreate db as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb5dbcf2-87e7-44bf-b3ac-64bea9b9f00c",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned admin_id:1, username:admin\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.admin_id).to.eql(1);",
									"    pm.expect(jsonData.response.username).to.eql('admin');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/admin/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"admin",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "Recreate db",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bda5987d-12d8-46ec-af99-62a6dfeae12f",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned response with empty array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users no body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users missing email and username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"should have returned error that email and username were missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.missing).to.eql(['email','username']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users missing email and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"should have returned error that email and password were missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.missing).to.eql(['email','password']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"user\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users missing username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"should have returned error that username and password were missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.missing).to.eql(['username','password']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"email@domain.com\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users missing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"should have returned error that email was missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.missing).to.eql(['email']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"user\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users missing username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"should have returned error that username was missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.missing).to.eql(['username']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"email@domain.com\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users missing password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"should have returned error that password was missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.missing).to.eql(['password']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"email@domain.com\",\"username\":\"user\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"bob@domain.com\",\"username\":\"bob\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:2, username:joe\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"joe@domain.com\",\"username\":\"joe\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users duplicate username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"should have returned error that username was not unique\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error['not unique']).to.eql(['username']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"joe2@domain.com\",\"username\":\"joe\",\"password\":\"test2\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users duplicate email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"should have returned error that email was not unique\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error['not unique']).to.eql(['email']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"joe@domain.com\",\"username\":\"joe2\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(2);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response[0]).to.have.property('username','bob');",
									"    pm.expect(jsonData.response[1]).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response[1]).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users search for bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response[0]).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users?q=bob",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "q",
									"value": "bob"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users filter for bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response[0]).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"filters\": [\n\t\t{\n\t\t\t\"column\": \"username\",\n\t\t\t\"value\": \"bob\",\n\t\t\t\"cmp\": \"exact\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users sort by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(2);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response[0]).to.have.property('username','bob');",
									"    pm.expect(jsonData.response[1]).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response[1]).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"sorters\": [\n\t\t{\n\t\t\t\"column\": \"username\",\n\t\t\t\"descending\": \"false\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users sort by username dsc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(2);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response[0]).to.have.property('username','joe');",
									"    pm.expect(jsonData.response[1]).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response[1]).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"filters\": [],\n\t\"sorters\": [\n\t\t{\n\t\t\t\"column\": \"username\",\n\t\t\t\"descending\": \"true\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users sort by multi: channel_description asc then user_id dsc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(2);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response[0]).to.have.property('username','joe');",
									"    pm.expect(jsonData.response[1]).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response[1]).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"filters\": [],\n\t\"sorters\": [\n\t\t{\n\t\t\t\"column\": \"channel_description\",\n\t\t\t\"descending\": \"false\"\n\t\t},\n\t\t{\n\t\t\t\"column\": \"user_id\",\n\t\t\t\"descending\": \"true\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users [ 0 : 1]",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response[0]).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users?b=0&l=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "b",
									"value": "0"
								},
								{
									"key": "l",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login as bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"bob\",\n\t\"password\": \"test\"\n}"
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login as joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"joe\",\n\t\"password\": \"test\"\n}"
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login as bob with token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e4ea83ca-9923-4c41-a028-861c8a2f5605",
								"exec": [
									"pm.sendRequest({",
									"   url: pm.variables.get('host')+'/login',",
									"   method: 'POST',",
									"   header: {",
									"     \"Content-Type\": \"application/json\"  ",
									"   },",
									"   body: {",
									"       mode: 'raw',",
									"       raw: JSON.stringify({",
									"           'username': 'bob',",
									"           'password': 'test'",
									"       })",
									"   }",
									"}, function (err, response) {",
									"    let res = response.json();",
									"    console.log(res);",
									"    if(res.response) {",
									"        if(res.response.token) {",
									"            console.log('access_token',res.response.token);",
									"            pm.environment.set('access_token',res.response.token);",
									"            return;",
									"        }",
									"    }",
									"    throw 'Error: response did not have token';",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"bob\",\n\t\"token\": \"{{access_token}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login as joe with token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e4ea83ca-9923-4c41-a028-861c8a2f5605",
								"exec": [
									"pm.sendRequest({",
									"   url: pm.variables.get('host')+'/login',",
									"   method: 'POST',",
									"   header: {",
									"     \"Content-Type\": \"application/json\"  ",
									"   },",
									"   body: {",
									"       mode: 'raw',",
									"       raw: JSON.stringify({",
									"           'username': 'joe',",
									"           'password': 'test'",
									"       })",
									"   }",
									"}, function (err, response) {",
									"    let res = response.json();",
									"    console.log(res);",
									"    if(res.response) {",
									"        if(res.response.token) {",
									"            console.log('access_token',res.response.token);",
									"            pm.environment.set('access_token',res.response.token);",
									"            return;",
									"        }",
									"    }",
									"    throw 'Error: response did not have token';",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"joe\",\n\t\"token\": \"{{access_token}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob subscribes to joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"subscribing_id\":\"1\",\"subscribed_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/subscribe",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"subscribe"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET subscribers counts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(1);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response[0]).to.have.property('subscribers',1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/subscribers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"subscribers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET subscribers counts for user id 2 (joe)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:2, subscribers:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('subscribers',1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/2/subscribers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"2",
								"subscribers"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob friends joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"friending_id\":\"1\",\"friended_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/friend",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"friend"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNLINK bob unsubscribes from joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "UNLINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"unsubscribing_id\":\"1\",\"unsubscribed_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/unsubscribe",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"unsubscribe"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNLINK bob unfriends joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "UNLINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"unfriending_id\":\"1\",\"unfriended_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/unfriend",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"unfriend"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob blocks joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"blocking_id\":\"1\",\"blocked_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/block",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"block"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK joe subscribes to bob while blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"subscribing_id\":\"2\",\"subscribed_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/users/subscribe",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"subscribe"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK joe friends bob while blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"friending_id\":\"2\",\"friended_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/users/friend",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"friend"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNLINK bob unblocks joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "UNLINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"unblocking_id\":\"1\",\"unblocked_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/unblock",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"unblock"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user id 1 (bob) not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "522476eb-4e04-4aca-816b-aaf488972468",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user id 1 (bob) logged in as other",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "522476eb-4e04-4aca-816b-aaf488972468",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "522476eb-4e04-4aca-816b-aaf488972468",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user id 1 (bob) removed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"should have returned error that user_id 1 was not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"user_id 1 not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create henry after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:3, username:henry\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',3);",
									"    pm.expect(jsonData.response).to.have.property('username','henry');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"henry@domain.com\",\"username\":\"henry\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE user id 2 (joe) using token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "522476eb-4e04-4aca-816b-aaf488972468",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:2, username:joe\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7b6df138-5bd5-49c1-beca-6bb3c7d4329c",
								"exec": [
									"pm.sendRequest({",
									"   url: pm.variables.get('host')+'/login',",
									"   method: 'POST',",
									"   header: {",
									"     \"Content-Type\": \"application/json\"  ",
									"   },",
									"   body: {",
									"       mode: 'raw',",
									"       raw: JSON.stringify({",
									"           'username': 'joe',",
									"           'password': 'test'",
									"       })",
									"   }",
									"}, function (err, response) {",
									"    let res = response.json();",
									"    console.log(res);",
									"    if(res.response) {",
									"        if(res.response.token) {",
									"            console.log('access_token',res.response.token);",
									"            pm.environment.set('access_token',res.response.token);",
									"            return;",
									"        }",
									"    }",
									"    throw 'Error: response did not have token';",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "files",
			"item": [
				{
					"name": "Recreate db",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bda5987d-12d8-46ec-af99-62a6dfeae12f",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned response with empty array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"bob@domain.com\",\"username\":\"bob\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:2, username:joe\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"joe@domain.com\",\"username\":\"joe\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(2);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response[0]).to.have.property('username','bob');",
									"    pm.expect(jsonData.response[1]).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response[1]).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67f7475b-829c-4461-abef-06bb6416f2aa",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/BobFile1.txt"
								},
								{
									"key": "user_id",
									"value": "2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/BobFile1.txt"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's File",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "text",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file video logged in user_id 2 (joe)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:2, user_id:2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',2);",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/Joe'sVideo1.mp4"
								},
								{
									"key": "user_id",
									"value": "2",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Joe's Video",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Joe's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "public",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "text",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file audio logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:3, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',3);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/Catas & Kasger - Blueshift.mp3"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's Music File 1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "text",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file image logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:4, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',4);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/BusyCat.jpg"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's Image File 1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "image",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file video logged in user_id 1 token (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:5, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',5);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9647ea3-d780-432f-8c7f-6ea4dcd7001a",
								"exec": [
									"pm.sendRequest({",
									"   url: pm.variables.get('host')+'/login',",
									"   method: 'POST',",
									"   header: {",
									"     \"Content-Type\": \"application/json\"  ",
									"   },",
									"   body: {",
									"       mode: 'raw',",
									"       raw: JSON.stringify({",
									"           'username': 'bob',",
									"           'password': 'test'",
									"       })",
									"   }",
									"}, function (err, response) {",
									"    let res = response.json();",
									"    console.log(res);",
									"    if(res.response) {",
									"        if(res.response.token) {",
									"            console.log('access_token',res.response.token);",
									"            pm.environment.set('access_token',res.response.token);",
									"            return;",
									"        }",
									"    }",
									"    throw 'Error: response did not have token';",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/wat - Gary Bernhardt CodeMash 2012 Lightning Talk.mp4"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's Video File 1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "video",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file large video logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:6, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',6);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/The Birth & Death of JavaScript - Gary Bernhardt PyCon 2014.mp4"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's Large Video File 1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "video",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 6\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(6);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET file_id 1 (Bob's file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98b015d7-d8b1-4d71-84bd-10e3f917f603",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"1"
							]
						},
						"description": "GET file"
					},
					"response": []
				},
				{
					"name": "GET file_id 2 (Joe's file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98b015d7-d8b1-4d71-84bd-10e3f917f603",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:2, user_id:2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',2);",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"2"
							]
						},
						"description": "GET file"
					},
					"response": []
				},
				{
					"name": "LINK joe user_id 2 favorites Bob's file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/users/2/favorites",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"2",
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNLINK joe user_id 2 unfavorites Bob's file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "UNLINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/users/2/favorites",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"2",
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob blocks joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"blocking_id\":\"1\",\"blocked_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/block",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"block"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK joe user_id 2 favorites Bob's file while blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/users/2/favorites",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"2",
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE file_id 1 (Bob's file) not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0256301a-7d5e-4bce-82d4-ceb4a5936acd",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE file_id 1 (Bob's file) logged in as other",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f808a42d-15b3-426d-86bc-0a419e232b32",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE file_id 1 (Bob's file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b086f1f-d924-4129-a58d-73ab36c63301",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "playlists",
			"item": [
				{
					"name": "Recreate db",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"bob@domain.com\",\"username\":\"bob\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:2, username:joe\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"joe@domain.com\",\"username\":\"joe\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST playlist not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user_id\":\"1\",\"title\":\"Bob's Playlist\",\"description\":\"A test playlist\"}"
						},
						"url": {
							"raw": "{{host}}/playlists/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST playlist logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, title:Bob's Playlist, description:A test playlist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('title',\"Bob's Playlist\");",
									"    pm.expect(jsonData.response).to.have.property('description',\"A test playlist\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user_id\":\"1\",\"title\":\"Bob's Playlist\",\"description\":\"A test playlist\"}"
						},
						"url": {
							"raw": "{{host}}/playlists/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET playlist_id 1 (Bob's playlist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98b015d7-d8b1-4d71-84bd-10e3f917f603",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned playlist_id:1, user_id:1, title:Bob's Playlist, description:A test playlist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('playlist_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('title',\"Bob's Playlist\");",
									"    pm.expect(jsonData.response).to.have.property('description','A test playlist');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/playlists/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"1"
							]
						},
						"description": "GET file"
					},
					"response": []
				},
				{
					"name": "POST file logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/BobFile1.txt"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's File",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "text",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob adds his file to his playlist 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_id\":\"1\",\"playlist_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/playlists/1/file",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"1",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNLINK joe tries to remove file from bobs playlist 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "UNLINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_id\":\"1\",\"playlist_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/playlists/1/file",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"1",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNLINK bob removes his file from his playlist 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "UNLINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_id\":\"1\",\"playlist_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/playlists/1/file",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"1",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK joe tries to add file to bob's playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"file_id\":\"1\",\"playlist_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/playlists/1/file",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"1",
								"file"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE playlist_id 1 (Bob's playlist) not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0256301a-7d5e-4bce-82d4-ceb4a5936acd",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/playlists/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE playlst_id 1 (Bob's playlist) logged in as other",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f808a42d-15b3-426d-86bc-0a419e232b32",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/playlists/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE playlist_id 1 (Bob's playlist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b086f1f-d924-4129-a58d-73ab36c63301",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned playlist_id:1, user_id:1, title:Bob's Playlist, description:A test playlist\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('playlist_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('title',\"Bob's Playlist\");",
									"    pm.expect(jsonData.response).to.have.property('description','A test playlist');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/playlists/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"playlists",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "Recreate db",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"bob@domain.com\",\"username\":\"bob\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST category not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"category\":\"dance\"}"
						},
						"url": {
							"raw": "{{host}}/categories/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST category logged as user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"category\":\"dance\"}"
						},
						"url": {
							"raw": "{{host}}/categories/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST category as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned category:dance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('category_id',1);",
									"    pm.expect(jsonData.response).to.have.property('category',\"dance\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"category\":\"dance\"}"
						},
						"url": {
							"raw": "{{host}}/categories/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET category_id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98b015d7-d8b1-4d71-84bd-10e3f917f603",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned category:dance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('category',\"dance\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/categories/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"1"
							]
						},
						"description": "GET file"
					},
					"response": []
				},
				{
					"name": "DELETE category_id 1 not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0256301a-7d5e-4bce-82d4-ceb4a5936acd",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/categories/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE category_id 1 logged in as Bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f808a42d-15b3-426d-86bc-0a419e232b32",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/categories/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE category_id 1 as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b086f1f-d924-4129-a58d-73ab36c63301",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned category:dance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('category_id',1);",
									"    pm.expect(jsonData.response).to.have.property('category',\"dance\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/categories/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"categories",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "227c370d-d727-4a08-810f-d59930298f72",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "962b4fe7-2006-4a6d-93df-f446a79f6d0b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "keywords",
			"item": [
				{
					"name": "Recreate db",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"bob@domain.com\",\"username\":\"bob\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST keyword not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"keyword\":\"bikes\"}"
						},
						"url": {
							"raw": "{{host}}/keywords/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"keywords",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST keyword logged as user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"keyword\":\"bikes\"}"
						},
						"url": {
							"raw": "{{host}}/keywords/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"keywords",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST keyword as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned keyword:dance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('keyword_id',1);",
									"    pm.expect(jsonData.response).to.have.property('keyword',\"bikes\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"keyword\":\"bikes\"}"
						},
						"url": {
							"raw": "{{host}}/keywords/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"keywords",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET keyword_id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98b015d7-d8b1-4d71-84bd-10e3f917f603",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned category:dance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('keyword',\"bikes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/keywords/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"keywords",
								"1"
							]
						},
						"description": "GET file"
					},
					"response": []
				},
				{
					"name": "DELETE keyword_id 1 not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0256301a-7d5e-4bce-82d4-ceb4a5936acd",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/keywords/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"keywords",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE keyword_id 1 logged in as Bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f808a42d-15b3-426d-86bc-0a419e232b32",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/keywords/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"keywords",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE keyword_id 1 as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b086f1f-d924-4129-a58d-73ab36c63301",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned keyword:bikes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('keyword_id',1);",
									"    pm.expect(jsonData.response).to.have.property('keyword',\"bikes\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/keywords/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"keywords",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "227c370d-d727-4a08-810f-d59930298f72",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "962b4fe7-2006-4a6d-93df-f446a79f6d0b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "messages",
			"item": [
				{
					"name": "Recreate db",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"bob@domain.com\",\"username\":\"bob\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:2, username:joe\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"joe@domain.com\",\"username\":\"joe\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create henry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:3, username:henry\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',3);",
									"    pm.expect(jsonData.response).to.have.property('username','henry');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"henry@domain.com\",\"username\":\"henry\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST message not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\": \"1\", \"contacted_id\": \"2\", \"message\":\"hey\"}"
						},
						"url": {
							"raw": "{{host}}/messages/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob add joe as contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\":\"1\",\"contacted_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/add_contact",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add_contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK henry add bob as contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "henry",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\":\"3\",\"contacted_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/users/add_contact",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add_contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST bob(1) message joe(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned message:hey\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('message_id',1);",
									"    pm.expect(jsonData.response).to.have.property('message',\"hey\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\": \"1\", \"contacted_id\": \"2\", \"message\":\"hey\"}"
						},
						"url": {
							"raw": "{{host}}/messages/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNLINK bob remove joe as contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "UNLINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contact_removing_id\":\"1\",\"contact_removed_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/remove_contact",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"remove_contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob blocks joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"blocking_id\":\"1\",\"blocked_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/block",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"block"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob blocks henry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"blocking_id\":\"1\",\"blocked_id\":\"3\"}"
						},
						"url": {
							"raw": "{{host}}/users/block",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"block"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK joe adds bob as contact while blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\":\"2\",\"contacted_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/users/add_contact",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add_contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST henry(3) message bob(1) while blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "henry",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\": \"3\", \"contacted_id\": \"1\", \"message\":\"hey\"}"
						},
						"url": {
							"raw": "{{host}}/messages/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNLINK bob unblocks henry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "UNLINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"unblocking_id\":\"1\",\"unblocked_id\":\"3\"}"
						},
						"url": {
							"raw": "{{host}}/users/unblock",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"unblock"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST henry(1) message bob(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned message:hey\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('message_id',2);",
									"    pm.expect(jsonData.response).to.have.property('message',\"hey\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "henry",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\": \"3\", \"contacted_id\": \"1\", \"message\":\"hey\"}"
						},
						"url": {
							"raw": "{{host}}/messages/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"upload"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "227c370d-d727-4a08-810f-d59930298f72",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "962b4fe7-2006-4a6d-93df-f446a79f6d0b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "comments",
			"item": [
				{
					"name": "Recreate db",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"bob@domain.com\",\"username\":\"bob\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:2, username:joe\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"joe@domain.com\",\"username\":\"joe\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(2);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response[0]).to.have.property('username','bob');",
									"    pm.expect(jsonData.response[1]).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response[1]).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/BobFile1.txt"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's File",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "text",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET file_id 1 (Bob's file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98b015d7-d8b1-4d71-84bd-10e3f917f603",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"1"
							]
						},
						"description": "GET file"
					},
					"response": []
				},
				{
					"name": "POST joe comments on bob's file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:2, comment: cool file\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('comment','cool file');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user_id\":\"2\",\"file_id\":\"1\",\"comment\":\"cool file\"}"
						},
						"url": {
							"raw": "{{host}}/comments/add_comment",
							"host": [
								"{{host}}"
							],
							"path": [
								"comments",
								"add_comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob blocks joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"blocking_id\":\"1\",\"blocked_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/block",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"block"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST joe comments on bob's file while blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user_id\":\"2\",\"file_id\":\"1\",\"comment\":\"cool file\"}"
						},
						"url": {
							"raw": "{{host}}/comments/add_comment",
							"host": [
								"{{host}}"
							],
							"path": [
								"comments",
								"add_comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET comment_id 1, joe's comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98b015d7-d8b1-4d71-84bd-10e3f917f603",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:2, comment: cool file\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response[0]).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response[0]).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response[0]).to.have.property('comment','cool file');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/comments/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"comments",
								"1"
							]
						},
						"description": "GET file"
					},
					"response": []
				},
				{
					"name": "DELETE comment_id 1 (joe's comment)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b086f1f-d924-4129-a58d-73ab36c63301",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:2, comment: cool file\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('comment','cool file');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/comments/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE file_id 1 (Bob's file) not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0256301a-7d5e-4bce-82d4-ceb4a5936acd",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE file_id 1 (Bob's file) logged in as other",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f808a42d-15b3-426d-86bc-0a419e232b32",
								"exec": [
									"pm.test(\"Status code should be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE file_id 1 (Bob's file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b086f1f-d924-4129-a58d-73ab36c63301",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "files_no_delete",
			"item": [
				{
					"name": "Recreate db",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd1ea82a-7221-4ffc-9009-9b178056dc19",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/db",
							"host": [
								"{{host}}"
							],
							"path": [
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bda5987d-12d8-46ec-af99-62a6dfeae12f",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned response with empty array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:1, username:bob\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"    pm.expect(jsonData.response).to.have.property('username','bob');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"bob@domain.com\",\"username\":\"bob\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:2, username:joe\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"    pm.expect(jsonData.response).to.have.property('username','joe');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"joe@domain.com\",\"username\":\"joe\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST users create henry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26ce2526-2d94-4404-bca6-e71dbff03ff5",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned user_id:3, username:henry\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('user_id',3);",
									"    pm.expect(jsonData.response).to.have.property('username','henry');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"henry@domain.com\",\"username\":\"henry\",\"password\":\"test\"}"
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob subscribes to joe",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"subscribing_id\":\"1\",\"subscribed_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/subscribe",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"subscribe"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob subscribes to henry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"subscribing_id\":\"1\",\"subscribed_id\":\"3\"}"
						},
						"url": {
							"raw": "{{host}}/users/subscribe",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"subscribe"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK joe subscribes to henry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"subscribing_id\":\"2\",\"subscribed_id\":\"3\"}"
						},
						"url": {
							"raw": "{{host}}/users/subscribe",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"subscribe"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET subscribers counts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/users/subscribers",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"subscribers"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file doc logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:1, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',1);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/BobFile1.txt"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's File",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "text",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file video logged in user_id 2 (joe)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:2, user_id:2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',2);",
									"    pm.expect(jsonData.response).to.have.property('user_id',2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/Joe'sVideo1.mp4"
								},
								{
									"key": "user_id",
									"value": "2",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Joe's Video",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Joe's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "public",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "video",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file audio logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:3, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',3);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/Catas & Kasger - Blueshift.mp3"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's Music File 1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "audio",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file image logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:4, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',4);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/BusyCat.jpg"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's Image File 1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "image",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file video logged in user_id 1 token (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:5, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',5);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9647ea3-d780-432f-8c7f-6ea4dcd7001a",
								"exec": [
									"pm.sendRequest({",
									"   url: pm.variables.get('host')+'/login',",
									"   method: 'POST',",
									"   header: {",
									"     \"Content-Type\": \"application/json\"  ",
									"   },",
									"   body: {",
									"       mode: 'raw',",
									"       raw: JSON.stringify({",
									"           'username': 'bob',",
									"           'password': 'test'",
									"       })",
									"   }",
									"}, function (err, response) {",
									"    let res = response.json();",
									"    console.log(res);",
									"    if(res.response) {",
									"        if(res.response.token) {",
									"            console.log('access_token',res.response.token);",
									"            pm.environment.set('access_token',res.response.token);",
									"            return;",
									"        }",
									"    }",
									"    throw 'Error: response did not have token';",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/wat - Gary Bernhardt CodeMash 2012 Lightning Talk.mp4"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's Video File 1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "video",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST file large video logged in user_id 1 (bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d3d6bc-bcf8-4d3f-a02d-bf4a795e10a8",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned file_id:6, user_id:1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('file_id',6);",
									"    pm.expect(jsonData.response).to.have.property('user_id',1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "{{path}}/MeTube/server/tests/The Birth & Death of JavaScript - Gary Bernhardt PyCon 2014.mp4"
								},
								{
									"key": "user_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Bob's Large Video File 1",
									"type": "text"
								},
								{
									"key": "description",
									"value": "A test description of Bob's file.",
									"type": "text"
								},
								{
									"key": "permissions",
									"value": "private",
									"type": "text"
								},
								{
									"key": "file_type",
									"value": "video",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/files/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1459cfab-cd1a-48de-abf6-b92d0d09ae75",
								"exec": [
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned list of 6\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.length).to.eql(6);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/files",
							"host": [
								"{{host}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob add joe as contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\":\"1\",\"contacted_id\":\"2\"}"
						},
						"url": {
							"raw": "{{host}}/users/add_contact",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add_contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK joe add bob as contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "joe",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\":\"2\",\"contacted_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/users/add_contact",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add_contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK bob add henry as contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\":\"1\",\"contacted_id\":\"3\"}"
						},
						"url": {
							"raw": "{{host}}/users/add_contact",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add_contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "LINK henry add bob as contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "henry",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "LINK",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\":\"3\",\"contacted_id\":\"1\"}"
						},
						"url": {
							"raw": "{{host}}/users/add_contact",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"add_contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST bob(1) message joe(2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned message:hey\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('message_id',1);",
									"    pm.expect(jsonData.response).to.have.property('message',\"hey\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\": \"1\", \"contacted_id\": \"2\", \"message\":\"hey\"}"
						},
						"url": {
							"raw": "{{host}}/messages/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST bob(1) message joe(2) again",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned message:hey\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('message_id',2);",
									"    pm.expect(jsonData.response).to.have.property('message',\"hey again\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\": \"1\", \"contacted_id\": \"2\", \"message\":\"hey again\"}"
						},
						"url": {
							"raw": "{{host}}/messages/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST joe(2) message bob(1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned message:hey\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('message_id',3);",
									"    pm.expect(jsonData.response).to.have.property('message',\"whats up dude?\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\": \"2\", \"contacted_id\": \"1\", \"message\":\"whats up dude?\"}"
						},
						"url": {
							"raw": "{{host}}/messages/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST bob(1) message henry(3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559e736b-dc7f-481c-9c7b-55133a3227ee",
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"should have returned message:hey\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property('message_id',4);",
									"    pm.expect(jsonData.response).to.have.property('message',\"yo dude\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "bob",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"contacting_id\": \"1\", \"contacted_id\": \"3\", \"message\":\"yo dude\"}"
						},
						"url": {
							"raw": "{{host}}/messages/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"messages",
								"upload"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "15fde72f-1d11-482c-8723-8ad9efc160bb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "dbb0832f-2278-4a4b-bda7-176dd407b4a6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}